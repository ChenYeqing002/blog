(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{451:function(v,_,l){"use strict";l.r(_);var i=l(2),t=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"jvm调优"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优"}},[v._v("#")]),v._v(" JVM调优")]),v._v(" "),_("h3",{attrs:{id:"什么情况需要调优"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么情况需要调优"}},[v._v("#")]),v._v(" 什么情况需要调优?")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("GC时间过长")])]),v._v(" "),_("li",[_("p",[v._v("GC次数过于频繁")])]),v._v(" "),_("li",[_("p",[v._v("OOM异常")])])]),v._v(" "),_("h3",{attrs:{id:"调优的作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优的作用"}},[v._v("#")]),v._v(" 调优的作用")]),v._v(" "),_("p",[v._v("让堆内存中对象的创建和垃圾的手机更加和谐, 减少GC时间, 降低 full GC次数")]),v._v(" "),_("h3",{attrs:{id:"调优的方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优的方式"}},[v._v("#")]),v._v(" 调优的方式")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("代码的调整")])]),v._v(" "),_("li",[_("p",[v._v("参数的设置")])])]),v._v(" "),_("h3",{attrs:{id:"jvm参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm参数"}},[v._v("#")]),v._v(" JVM参数")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("-xss 设置线程栈的最大内存空间")])]),v._v(" "),_("li",[_("p",[v._v("-xms 设置堆的起始内存")])]),v._v(" "),_("li",[_("p",[v._v("-xmx 设置堆的最大内存")])]),v._v(" "),_("li",[_("p",[v._v("-xmn 设置新生代大小")])]),v._v(" "),_("li",[_("p",[v._v("-XX:NewRatio 配置新生代和老年代占比 默认新生代占1,老年代占2")])]),v._v(" "),_("li",[_("p",[v._v("-XX:ServivorRatio 新生代中eden和survivor占比 默认 8:1:1")])]),v._v(" "),_("li",[_("p",[v._v("-XX:MaxTenuringThreshold 配置多少次进入老年代")])]),v._v(" "),_("li",[_("p",[v._v("-XX:PretenureSizeThreshold 大对象阈值")])])]),v._v(" "),_("h3",{attrs:{id:"获取堆内存快照以及排查方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#获取堆内存快照以及排查方式"}},[v._v("#")]),v._v(" 获取堆内存快照以及排查方式")]),v._v(" "),_("h4",{attrs:{id:"获取快照"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#获取快照"}},[v._v("#")]),v._v(" 获取快照")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("通过参数dump堆内存快照, 发生OOM时自动生成快照文件")])]),v._v(" "),_("li",[_("p",[v._v("通过"),_("code",[v._v("jps")]),v._v("获取虚拟机进程ID, 通过"),_("code",[v._v("jmap")]),v._v("命令dump堆内存快照")]),v._v(" "),_("ul",[_("li",[v._v("jmap -dump:format=b,file=d:\\dump\\dump.hprof 进程id")])])])]),v._v(" "),_("h4",{attrs:{id:"排查方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#排查方式"}},[v._v("#")]),v._v(" 排查方式")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果加了参数, 出现OOM时会保存dump文件")])]),v._v(" "),_("li",[_("p",[v._v("找到JVM自带的工具jvisualvm.exe")])]),v._v(" "),_("li",[_("p",[v._v("装入生成的dump文件")])])]),v._v(" "),_("h3",{attrs:{id:"调优是调哪里"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优是调哪里"}},[v._v("#")]),v._v(" 调优是调哪里?")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("青年代和老年代的大小比例")])]),v._v(" "),_("li",[_("p",[v._v("eden和survivor的大小比例")])]),v._v(" "),_("li",[_("p",[v._v("调整大对象的大小")])]),v._v(" "),_("li",[_("p",[v._v("加内存, 但是太大也会影响速度, 因为垃圾回收的也多了")])]),v._v(" "),_("li",[_("p",[v._v("使用long类型进行for循环, JVM就会觉得很大, 会在循环中做一个安全点, 这样触发GC的时候, 会在循环中停住, 如果是int类型, 会等全部执行完再GC")])])]),v._v(" "),_("h3",{attrs:{id:"常用linux命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用linux命令"}},[v._v("#")]),v._v(" 常用Linux命令")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("top : CPU情况")])]),v._v(" "),_("li",[_("p",[v._v("free : 内存情况")])]),v._v(" "),_("li",[_("p",[v._v("jps -l: java进程")])]),v._v(" "),_("li",[_("p",[v._v("ps -ef : 查看进程")])]),v._v(" "),_("li",[_("p",[v._v("df -h : 磁盘空间")])]),v._v(" "),_("li",[_("p",[v._v("du /data/ : 统计目录下的大小")])]),v._v(" "),_("li",[_("p",[v._v("jstat -gc pid : 查看JVM的GC情况")])]),v._v(" "),_("li",[_("p",[v._v("jmap -dump pid: 生成堆快照")])])]),v._v(" "),_("h3",{attrs:{id:"调优经验"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优经验"}},[v._v("#")]),v._v(" 调优经验")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果大访问压力下, "),_("code",[v._v("MinorGC")]),v._v("频繁, 可以适当增加"),_("code",[v._v("eden")]),v._v("区空间, 同事保证增加"),_("code",[v._v("eden")]),v._v("空间不会造成GC时间过长")])]),v._v(" "),_("li",[_("p",[v._v("如果"),_("code",[v._v("MinorGC")]),v._v("频繁, 且容易引发"),_("code",[v._v("Full GC")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("每次"),_("code",[v._v("M GC")]),v._v("存活的对象的大小,是否能够全部移动到"),_("code",[v._v("S1")]),v._v("区, 如果"),_("code",[v._v("S1")]),v._v("区大小 < "),_("code",[v._v("M GC")]),v._v("存活的对象大小, 这批对象会直接进入老年代. 这批对象的年龄才1岁, 很有可能再多一次"),_("code",[v._v("M GC")]),v._v("就能被回收, 可是进入了老年代, 只能等到"),_("code",[v._v("Full GC")]),v._v("回收")])]),v._v(" "),_("li",[_("p",[v._v("相同年龄的对象所占空间大小 > "),_("code",[v._v("S1")]),v._v("区空间大小的一半,所以为了应对这种情况,对于"),_("code",[v._v("S")]),v._v("区的调整就要考虑: 尽量保证峰值状态下, "),_("code",[v._v("S1")]),v._v("区的对象所占空间能够在"),_("code",[v._v("M GC")]),v._v("过程中, 相同对象所占空间不大于"),_("code",[v._v("S1")]),v._v("区空间的一半,因此对于"),_("code",[v._v("S1")]),v._v("空间大小的调整")])])])]),v._v(" "),_("li",[_("p",[v._v("如果大对象创建频繁, 导致"),_("code",[v._v("Full GC")]),v._v("频繁.对于大对象, JVM专门有参数进行控制. 超过参数值的对象, 就会直接进入老年代, 只能等"),_("code",[v._v("Full GC")]),v._v("进行回收, 所以在系统压测过程中, 要重点监测大对象的产生.")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果能够优化对象大小, 则在代码层面进行优化, 比如: 根据业务需求看是否可以将该大对象设置为单例模式下的对象, 或者该大对象是否可以进行拆分使用, 或者确定使用完之后, 手动设置成null方便回收.")])]),v._v(" "),_("li",[_("p",[v._v("如果代码层面无法优化, 则需要考虑调高大对象的阈值, 使大对象能再eden区创建, 有机会被"),_("code",[v._v("M GC")]),v._v("回收. 但是这个参数要考虑"),_("code",[v._v("eden")]),v._v("区的大小, 包括"),_("code",[v._v("S1")]),v._v("区的承载")])]),v._v(" "),_("li",[_("p",[v._v("最不希望发生的情况: 如果必须进入老年代,也要保证大对象是长时间使用的对象, 放入老年代的总对象创建量不会造成老年代的内存空间迅速长满发生Full GC, 在这种情况下, 可以通过定时脚本, 在业务系统不繁忙的时候,主动触发Full GC")])])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("M GC")]),v._v("和"),_("code",[v._v("F GC")]),v._v("停顿时间长导致影响用户体验. 其实对于停顿时间长的问题无非就两种:")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("真实回收过程时间长, 即real time时间长.这种时间长大部分是因为内存过大导致, 导致从标记到清理的过程中需要对很大的空间进行操作, 导致停顿时间长.")]),v._v(" "),_("ul",[_("li",[v._v("处理方法: 可能是因为JVM内存过大, 比如32g或者16g, 导致GC时间过长, 可以通过减少堆内存大小来解决, 比如拆分成4个4G的内存, 单台机器部署JVM逻辑集群, 或者进行4节点的分布式部署, 降低GC垃圾回收时间")])])]),v._v(" "),_("li",[_("p",[v._v("gc真实回收时间real time并不长,但是user time和sys time时间长, 导致从客户角度来看,停顿时间过长")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("考虑线程是否及时到达了安全点,通过-XX: +PrintSafepointSatistics和-XX:PrintsafepointStatisticsCount=1去查看安全点日志,如果有长时间未到达安全点的线程,再通过参数 -XX:+SafepointTimeout和-XX:SafepointTimeoutDelay=2000两个参数来找到大于2000ms到达安全点的线程, 这里的2000ms可以自己根据情况设置, 然后对代码进行整体调整.")])]),v._v(" "),_("li",[_("p",[v._v("当日, 除了安全点问题, 还可以是操作系统本身负载比较高, 导致处理速度过慢, 同时还要检测操作系统自身的运行情况")])])])])])])]),v._v(" "),_("h3",{attrs:{id:"调优案例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优案例"}},[v._v("#")]),v._v(" 调优案例")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("项目使用-Xms和-Xmx参数将堆大小固定在12GB, 在运行一段时间之后监控发现一次Full GC的停顿时间就高达14秒. 由于程序设计的原因, 访问文档时会把文档从磁盘中提取到内存中,导致内存中出现很多由文档序列化产生的大对象, 这些大对象大多在分配时就直接进入了老年代,没有在"),_("code",[v._v("Minor GC")]),v._v("中被清理掉. 这种情况下即使有12GB的堆, 内存也会很快被消耗殆尽, 由此导致每隔几分钟出现10多秒的停顿")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("目前单体应用在较大内存的硬件上主要部署方式有两种:")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("通过一个单独的java虚拟机实例来管理大量的java堆内存(如果发生Full GC,会出现大量停顿)")])]),v._v(" "),_("li",[_("p",[v._v("同时使用若干个java虚拟机, 建立逻辑集群来利用硬件资源(目前这种情况在实际工作上很少见. 目前我们都是采用多节点部署, 容器部署(docker), 每一个jvm的进程他实际使用的内存资源不会特别大, 一般在2-4gb之间, 分布式部署,在一定程度上减轻了JVM垃圾回收的压力")])])])])])]),v._v(" "),_("li",[_("p",[v._v("由安全点导致的长时间停顿")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("在for循环中, HotSpot虚拟机为了避免安全点过多带来的过重负担,所以使用int类型或者更小的数据类型作为索引值的循环时默认不会被放置安全点. 所以如果循环体代码很慢,导致要GC的时候这个线程还在执行循环体的代码, 无法快速到达安全点, 导致其他现在正在安全点等待时间过长而造成GC时间过长.")]),v._v(" "),_("ul",[_("li",[v._v("可以使用long或者范围更大的数据类型作为索引的循环, 将会被放置安全点")])])])])]),v._v(" "),_("li",[_("p",[v._v("使用ExecutorCompletionService类导致OOM")])])])])}),[],!1,null,null,null);_.default=t.exports}}]);