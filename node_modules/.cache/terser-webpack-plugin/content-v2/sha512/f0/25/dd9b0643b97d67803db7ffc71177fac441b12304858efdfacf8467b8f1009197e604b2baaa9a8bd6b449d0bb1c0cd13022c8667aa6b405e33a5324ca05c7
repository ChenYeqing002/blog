{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{459:function(a,t,s){\"use strict\";s.r(t);var n=s(2),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"多线程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多线程\"}},[a._v(\"#\")]),a._v(\" 多线程\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"_1-juc\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-juc\"}},[a._v(\"#\")]),a._v(\" 1. JUC\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_1-1-juc简介\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-juc简介\"}},[a._v(\"#\")]),a._v(\" 1.1 JUC简介\")]),a._v(\" \"),t(\"p\",[a._v(\"java.util.concurrent包中的类就是JUC，是一个处理线程的工具包\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_1-2-进程与线程概念\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-进程与线程概念\"}},[a._v(\"#\")]),a._v(\" 1.2 进程与线程概念\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_1\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1\"}},[a._v(\"#\")]),a._v(\" 1）\")]),a._v(\" \"),t(\"p\",[a._v(\"进程\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU,数据加载至内\\n存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理O的\")]),a._v(\" \"),t(\"li\",[a._v(\"当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。\")]),a._v(\" \"),t(\"li\",[a._v(\"进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器\\n等)，也有的程序只能启动一个实例进程（例如网易云音乐、360安全卫士等）\")])]),a._v(\" \"),t(\"p\",[a._v(\"线程\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"一个进程之内可以分为一到多个线程。\")]),a._v(\" \"),t(\"li\",[a._v(\"一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行\")]),a._v(\" \"),t(\"li\",[a._v(\"Java中，线程作为最小调度单位，进程作为资源分配的最小单位。在windows中进程是不活动的，只是\\n作为线程的容器\")])]),a._v(\" \"),t(\"p\",[a._v(\"总结来说：\\n进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程 -- 资源分配的最小单位\")]),a._v(\" \"),t(\"p\",[a._v(\"线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。线程 -- 程序执行的最小单位\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_2-线程的状态\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-线程的状态\"}},[a._v(\"#\")]),a._v(\" 2） 线程的状态\")]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"enum\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"State\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 新建\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"NEW\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 准备就绪\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"RUNNABLE\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 阻塞\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"BLOCKED\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 等待 不见不散\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"WAITING\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 等待 过时不候\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"TIMED_WAITING\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 终结\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"TERMINATED\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])]),t(\"h4\",{attrs:{id:\"_3-wait-sleep-的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-wait-sleep-的区别\"}},[a._v(\"#\")]),a._v(\" 3） wait/sleep 的区别\")]),a._v(\" \"),t(\"p\",[a._v(\"两个方法都有等待的意思\")]),a._v(\" \"),t(\"p\",[a._v(\"1）sleep是 Thread 的静态方法，wait是Object的方法，任何对象实例都能调用\\n2）sleep不会释放锁，他也不需要占用锁；wait会释放锁，但调用它的前提是当前线程占有锁（也就是代码在synchronized中）\\n3）它们都可以被 interrupted 方法中断\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_4-并发和并行\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-并发和并行\"}},[a._v(\"#\")]),a._v(\" 4） 并发和并行\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"串行模式\\n\"),t(\"ul\",[t(\"li\",[a._v(\"表示所有任务都按先后顺序进行，即一次只能取得一个任务，并执行这个任务\")])])]),a._v(\" \"),t(\"li\",[a._v(\"并行模式\\n\"),t(\"ul\",[t(\"li\",[a._v(\"可以同时取得多个任务，并同时去执行所取得的这些任务\")])])]),a._v(\" \"),t(\"li\",[a._v(\"并发\\n\"),t(\"ul\",[t(\"li\",[a._v(\"在同一时间段内处理多个任务的能力，但这些任务不一定同时进行。\")])])])]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_5-管程-monitor-操作系统中叫监视器-java中叫锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-管程-monitor-操作系统中叫监视器-java中叫锁\"}},[a._v(\"#\")]),a._v(\" 5）管程（Monitor 操作系统中叫监视器 java中叫锁）\")]),a._v(\" \"),t(\"p\",[a._v(\"是一种同步机制，保证同一个时间，只能有一个线程访问被保护数据或代码\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"lock接口\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#lock接口\"}},[a._v(\"#\")]),a._v(\" Lock接口\")]),a._v(\" \"),t(\"p\",[a._v(\"synchronized 是 java 中的关键字，是一种同步锁。它修饰的对象有以下几种：\\n1）代码块\")]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 1\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"synchronized\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" aa \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 2\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"synchronized\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"test\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"test\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 3\")]),a._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"synchronized\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n  \\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])]),t(\"h3\",{attrs:{id:\"注意点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注意点\"}},[a._v(\"#\")]),a._v(\" 注意点\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"虚假唤醒\\n\"),t(\"ul\",[t(\"li\",[a._v(\"会在上次等待的地方醒来, 需要添加 while 判断\")])])])]),a._v(\" \"),t(\"p\",[a._v(\"死锁\")]),a._v(\" \"),t(\"p\",[a._v(\"验证的验证\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"jps -l\")]),a._v(\" \"),t(\"li\",[a._v(\"jstack 2068\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"读写锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读写锁\"}},[a._v(\"#\")]),a._v(\" 读写锁\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"一个资源可以被多个读线程访问；或者可以被一个写线程访问。但是不能同时存在读写线程。读写互斥，读读共享。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"锁降级\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#锁降级\"}},[a._v(\"#\")]),a._v(\" 锁降级\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"降写入锁降级为读锁（默认写的权限高于读的权限，比如linux可能有读操作，但是没有写操作）\")])]),a._v(\" \"),t(\"p\",[a._v(\"jdk8说明：\\n1、获取写锁\\n2、获取读锁\\n3、释放写锁\\n4、释放读锁\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"阻塞队列\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#阻塞队列\"}},[a._v(\"#\")]),a._v(\" 阻塞队列\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"首先他是一个\"),t(\"code\",[a._v(\"队列\")]),a._v(\",通过一个共享的队列,可以使得数据由队列的一端输入,从另外一端输出\")])]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"队列(先进先出)\")]),a._v(\" \"),t(\"li\",[a._v(\"栈(后进先出)\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"一、什么是arrayblockingqueue-https-blog-csdn-net-liuyu973971883-article-details-108100959\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、什么是arrayblockingqueue-https-blog-csdn-net-liuyu973971883-article-details-108100959\"}},[a._v(\"#\")]),a._v(\" 一、什么是ArrayBlockingQueue？(https://blog.csdn.net/liuyu973971883/article/details/108100959)\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"ArrayBlockingQueue是一个阻塞的队列，继承了AbstractBlockingQueue，间接的实现了Queue接口和Collection接口。底层以数组的形式保存数据，所以它是基于数组的阻塞队列。ArrayBlockingQueue是有边界值的，在创建ArrayBlockingQueue时就要确定好该队列的大小，一旦创建，该队列大小不可更改。内部的全局锁是使用的ReentrantLock。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"二、使用场景\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、使用场景\"}},[a._v(\"#\")]),a._v(\" 二、使用场景\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"先进先出（队首是最旧的元素；队尾是新添加的元素）\")]),a._v(\" \"),t(\"li\",[a._v(\"有界队列（即初始化时指定的容量，就是队列最大的容量，不会出现扩容，容量满，则阻塞进队操作；容量空，则阻塞出队操作）\")]),a._v(\" \"),t(\"li\",[a._v(\"队列不支持空元素\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"三、常用的方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、常用的方法\"}},[a._v(\"#\")]),a._v(\" 三、常用的方法\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_1、构造方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、构造方法\"}},[a._v(\"#\")]),a._v(\" 1、构造方法\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"capacity：队列初始化大小\")]),a._v(\" \"),t(\"li\",[a._v(\"fair：表示该队列中的可重入锁是否公平，默认为false\")]),a._v(\" \"),t(\"li\",[a._v(\"c：添加的集合\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ArrayBlockingQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" capacity\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ArrayBlockingQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" capacity\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"boolean\")]),a._v(\" fair\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ArrayBlockingQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" capacity\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"boolean\")]),a._v(\" fair\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Collection\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"?\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"extends\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"E\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\" c\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\")])])]),t(\"h3\",{attrs:{id:\"_2、add方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、add方法\"}},[a._v(\"#\")]),a._v(\" 2、add方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"在队列的尾部添加元素，返回true。当队列满的时候会抛出IllegalStateException异常。\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ArrayBlockingQueue\")]),a._v(\" blockingQueue \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ArrayBlockingQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"3\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"arrayBlockingQueue\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"a\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"arrayBlockingQueue\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"b\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"arrayBlockingQueue\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"c\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 满了会报错\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"arrayBlockingQueue\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"w\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\")])])]),t(\"div\",{staticClass:\"language-markdown extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-markdown\"}},[t(\"code\",[a._v('Exception in thread \"main\" java.lang.IllegalStateException: Queue full\\n\\tat java.util.AbstractQueue.add(AbstractQueue.java:98)\\n\\tat java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:312)\\n\\tat com.cyq.blog.thread.BlockingQueueDemo.main(BlockingQueueDemo.java:50)\\n')])])]),t(\"h3\",{attrs:{id:\"_3、offer方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、offer方法\"}},[a._v(\"#\")]),a._v(\" 3、offer方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"在队列的尾部添加元素，如果添加成功返回true，否则返回false。\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"/**\\n * 等待时间内添加不进去会一直阻塞\\n * e：添加的元素\\n * timeout：最多等待的时长\\n * unit：时间单位\\n */\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"boolean\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"offer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"E\")]),a._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"long\")]),a._v(\" timeout\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"TimeUnit\")]),a._v(\" unit\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"throws\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"InterruptedException\")]),a._v(\"\\n\")])])]),t(\"h3\",{attrs:{id:\"_4、put方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、put方法\"}},[a._v(\"#\")]),a._v(\" 4、put方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"在队列的尾部添加元素，如果队列已满，则会阻塞住，等待队列有空闲位置，该方法可被打断。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_5、take方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5、take方法\"}},[a._v(\"#\")]),a._v(\" 5、take方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"获取队列中的元素,如果没有则会被阻塞\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6、poll方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6、poll方法\"}},[a._v(\"#\")]),a._v(\" 6、poll方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"获取队列中队首的元素,获取后该元素就会移除该队列\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//立即返回\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"E\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"poll\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//如果不能立即取出，则等待一定时间\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"E\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"poll\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"long\")]),a._v(\" timeout\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"TimeUnit\")]),a._v(\" unit\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"throws\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"InterruptedException\")]),a._v(\"\\n\")])])]),t(\"h3\",{attrs:{id:\"_7、peek方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7、peek方法\"}},[a._v(\"#\")]),a._v(\" 7、peek方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"读取队列中队首的元素，不会删除该元素。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_8、remove方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8、remove方法\"}},[a._v(\"#\")]),a._v(\" 8、remove方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"删除队列中指定元素。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_9、contains方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9、contains方法\"}},[a._v(\"#\")]),a._v(\" 9、contains方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"查询队列中是否存在某个元素\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_10、remainingcapacity方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10、remainingcapacity方法\"}},[a._v(\"#\")]),a._v(\" 10、remainingCapacity方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"返回队列中剩余空闲位置\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_11、drainto方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11、drainto方法\"}},[a._v(\"#\")]),a._v(\" 11、drainTo方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"将队列中的元素排到指定集合中去\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"drainTo\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Collection\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"?\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"super\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"E\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\" c\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"/**\\n * c：目标集合\\n * maxElements：最多排几个元素\\n */\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"drainTo\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Collection\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"?\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"super\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"E\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\" c\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" maxElements\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\")])])]),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"List\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\" strings1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ArrayList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" i \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" blockingQueue\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"drainTo\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"strings1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"2\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"drainTo()返回值 === \"')]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" i\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"for\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),a._v(\" s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" strings1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"输出 string1 的元素 === \"')]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" s\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])]),t(\"div\",{staticClass:\"language-text extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"drainTo()返回值 === 2\\n输出 string1 的元素 === a\\n输出 string1 的元素 === b\\n\")])])]),t(\"h2\",{attrs:{id:\"threadpool-线程池\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#threadpool-线程池\"}},[a._v(\"#\")]),a._v(\" ThreadPool 线程池\")]),a._v(\" \"),t(\"p\",[a._v(\"[https://blog.csdn.net/lift_class/article/details/70216690]\")]),a._v(\" \"),t(\"p\",[a._v(\"[https://blog.csdn.net/he90227/article/details/52576452]回家看看\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"线程池概述\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程池概述\"}},[a._v(\"#\")]),a._v(\" 线程池概述\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"为什么使用线程池\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么使用线程池\"}},[a._v(\"#\")]),a._v(\" 为什么使用线程池?\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"创建/销毁线程伴随着系统开销,过于频繁的创建/销毁线程,会很大程度上影响处理效率\"),t(\"div\",{staticClass:\"language-markdown extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-markdown\"}},[t(\"code\",[a._v(\"例如:\\n创建线程消耗时间\"),t(\"span\",{pre:!0,attrs:{class:\"token code-snippet code keyword\"}},[a._v(\"`T1`\")]),a._v(\",执行任务消耗时间\"),t(\"span\",{pre:!0,attrs:{class:\"token code-snippet code keyword\"}},[a._v(\"`T2`\")]),a._v(\",销毁线程消耗时间\"),t(\"span\",{pre:!0,attrs:{class:\"token code-snippet code keyword\"}},[a._v(\"`T3`\")]),a._v(\"\\n如果 \"),t(\"span\",{pre:!0,attrs:{class:\"token code-snippet code keyword\"}},[a._v(\"`T1 + T3 > T2`\")]),a._v(\",那么说明开启一个线程来执行这个任务太不划算了\\n正好线程池缓存线程,可用已有的限制线程来执行这个新任务,避免了\"),t(\"span\",{pre:!0,attrs:{class:\"token code-snippet code keyword\"}},[a._v(\"`T1+T3`\")]),a._v(\"带来的系统开销\\n\")])])])]),a._v(\" \"),t(\"li\",[a._v(\"线程并发数量过多,抢占系统资源从而导致阻塞\"),t(\"div\",{staticClass:\"language-markdown extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-markdown\"}},[t(\"code\",[a._v(\"众所周知线程能共享系统资源,如果同时执行的线程过多,就有可能导致系统资源不足而产生的阻塞的情况\\n使用线程池能有效的控制线程最大并发数,避免上面的问题\\n\")])])])]),a._v(\" \"),t(\"li\",[a._v(\"对线程进行一些简单的管理\"),t(\"div\",{staticClass:\"language-markdown extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-markdown\"}},[t(\"code\",[a._v(\"比如: 延时执行、定时循环执行的策略等\\n运用线程池能进行很好的实现\\n\")])])])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"架构\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#架构\"}},[a._v(\"#\")]),a._v(\" 架构\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"使用方式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方式\"}},[a._v(\"#\")]),a._v(\" 使用方式\")]),a._v(\" \"),t(\"p\",[a._v(\"常用:\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"Executors.newFixedThreadPool(int) [一池N线程]\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"定长线程池：\\n\"),t(\"ol\",[t(\"li\",[a._v(\"可控制线程最大并发数（同时执行的线程数）\")]),a._v(\" \"),t(\"li\",[a._v(\"超出的线程会在队列中等待\")])]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"创建方法：\"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//nThreads => 最大线程数即maximumPoolSize\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ExecutorService\")]),a._v(\" fixedThreadPool \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Executors\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"newFixedThreadPool\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" nThreads\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//threadFactory => 创建线程的方法，这就是我叫你别理他的那个星期六！你还看！\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ExecutorService\")]),a._v(\" fixedThreadPool \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Executors\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"newFixedThreadPool\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" nThreads\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadFactory\")]),a._v(\" threadFactory\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\")])])])]),a._v(\" \"),t(\"li\",[a._v(\"源码：\"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ExecutorService\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"newFixedThreadPool\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" nThreads\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"return\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadPoolExecutor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"nThreads\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" nThreads\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n                                \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0L\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"TimeUnit\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"MILLISECONDS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n                                \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"LinkedBlockingQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Runnable\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])])])])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"Executors.newSingleThreadExecutor() [一池一线程,一个任务一个任务执行]\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"单线程化的线程池：\\n\"),t(\"ul\",[t(\"li\",[a._v(\"有且仅有一个工作线程执行任务\")]),a._v(\" \"),t(\"li\",[a._v(\"所有任务按照指定顺序执行，即遵循队列的入队出队规则\")])])]),a._v(\" \"),t(\"li\",[a._v(\"创建方法：\\n\"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"ExecutorService singleThreadPool = Executors.newSingleThreadPool();\")])])])]),a._v(\" \"),t(\"li\",[a._v(\"源码：\"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ExecutorService\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"newSingleThreadExecutor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"return\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"FinalizableDelegatedExecutorService\")]),a._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadPoolExecutor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0L\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"TimeUnit\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"MILLISECONDS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"LinkedBlockingQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Runnable\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"Executors.newCachedThreadPool() [根据需求创建线程,可扩容,遇强则强]\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"可缓存线程池：\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"线程数无限制\")]),a._v(\" \"),t(\"li\",[a._v(\"有空闲线程则复用空闲线程，若无空闲线程则新建线程\")]),a._v(\" \"),t(\"li\",[a._v(\"一定程序减少频繁创建/销毁线程，减少系统开销\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"创建方法：\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\")])])]),a._v(\" \"),t(\"li\",[t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ExecutorService\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"newCachedThreadPool\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"return\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadPoolExecutor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"MAX_VALUE\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"60L\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"TimeUnit\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"SECONDS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"SynchronousQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Runnable\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"ScheduledThreadPool()\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"定长线程池：\")])]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"支持定时及周期性任务执行\")])]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"创建方法：\"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//nThreads => 最大线程数即maximumPoolSize\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ExecutorService\")]),a._v(\" scheduledThreadPool \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Executors\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"newScheduledThreadPool\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" corePoolSize\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" \\n\")])])])]),a._v(\" \"),t(\"li\",[a._v(\"源码\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ScheduledExecutorService\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"newScheduledThreadPool\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" corePoolSize\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"return\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ScheduledThreadPoolExecutor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"corePoolSize\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//ScheduledThreadPoolExecutor():\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ScheduledThreadPoolExecutor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" corePoolSize\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"super\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"corePoolSize\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"MAX_VALUE\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"DEFAULT_KEEPALIVE_MILLIS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[a._v(\"MILLISECONDS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"DelayedWorkQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"底层原理\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#底层原理\"}},[a._v(\"#\")]),a._v(\" 底层原理\")]),a._v(\" \"),t(\"p\",[a._v(\"进入对应的方法能看到调用的方法都是 new ThreadPoolExecutor();\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"七个参数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#七个参数\"}},[a._v(\"#\")]),a._v(\" 七个参数\")]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"/**\\n * 文档翻译\\n * corePoolSize -一直存活的核心线程数，即使它们是空闲的，除非设置了{@code allowCoreThreadTimeOut}\\n * maximumPoolSize -允许在池中的最大线程数\\n * keepAliveTime -当线程数大于核心时，这是多余的空闲线程将在终止前等待新任务的最大时间。\\n * unit —keepAliveTime参数的时间单位。\\n * workQueue —在执行任务之前用来保存任务的队列。此队列将仅保存由execute方法提交的可运行任务。\\n * threadFactory —当执行器创建一个新的线程处理程序时使用的工厂\\n * handler —当执行因为线程边界和队列容量达到而被阻塞时使用的处理程序\\n */\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadPoolExecutor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" corePoolSize\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n                              \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" maximumPoolSize\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n                              \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"long\")]),a._v(\" keepAliveTime\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n                              \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"TimeUnit\")]),a._v(\" unit\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n                              \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"BlockingQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Runnable\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\" workQueue\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n                              \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadFactory\")]),a._v(\" threadFactory\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n                              \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"RejectedExecutionHandler\")]),a._v(\" handler\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\")])])]),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"int corePoolSize => 该线程池中核心线程数最大值\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"strong\",[a._v(\"核心线程：\")])]),a._v(\" \"),t(\"p\",[a._v(\"线程池新建线程的时候，如果当前线程总数小于corePoolSize，则新建的是核心线程，如果超过corePoolSize，则新建的是非核心线程\\n核心线程默认情况下会一直存活在线程池中，即使这个核心线程啥也不干(闲置状态)。\")]),a._v(\" \"),t(\"p\",[a._v(\"如果指定ThreadPoolExecutor的allowCoreThreadTimeOut这个属性为true，那么核心线程如果不干活(闲置状态)的话，超过一定时间(时长下面参数决定)，就会被销毁掉\\n很好理解吧，正常情况下你不干活我也养你，因为我总有用到你的时候，但有时候特殊情况(比如我自己都养不起了)，那你不干活我就要把你干掉了\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"int maximumPoolSize\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"该线程池中\"),t(\"strong\",[a._v(\"线程总数最大值\")])]),a._v(\" \"),t(\"p\",[a._v(\"线程总数 = 核心线程数 + 非核心线程数。核心线程在上面解释过了，这里说下非核心线程：\")]),a._v(\" \"),t(\"p\",[a._v(\"不是核心线程的线程(别激动，把刀放下…)，其实在上面解释过了\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"long keepAliveTime\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"该线程池中非核心线程闲置超时时长\")]),a._v(\" \"),t(\"p\",[a._v(\"一个非核心线程，如果不干活(闲置状态)的时长超过这个参数所设定的时长，就会被销毁掉\")]),a._v(\" \"),t(\"p\",[a._v(\"如果设置allowCoreThreadTimeOut = true，则会作用于核心线程\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"TimeUnit unit\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"strong\",[a._v(\"keepAliveTime\")]),a._v(\" 的单位，TimeUnit是一个枚举类型，其包括：\")]),a._v(\" \"),t(\"p\",[a._v(\"NANOSECONDS ： 1微毫秒 = 1微秒 / 1000\\nMICROSECONDS ： 1微秒 = 1毫秒 / 1000\\nMILLISECONDS ： 1毫秒 = 1秒 /1000\\nSECONDS ： 秒\\nMINUTES ： 分\\nHOURS ： 小时\\nDAYS ： 天\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"BlockingQueue workQueue\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"该线程池中的任务队列：维护着等待执行的Runnable对象\")]),a._v(\" \"),t(\"p\",[a._v(\"当所有的核心线程都在干活时，新添加的任务会被添加到这个队列中等待处理，如果队列满了，则新建非核心线程执行任务\")]),a._v(\" \"),t(\"p\",[a._v(\"常用的workQueue类型：\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"SynchronousQueue\")]),a._v(\"：这个队列接收到任务的时候，会直接提交给线程处理，而不保留它，如果所有线程都在工作怎么办？那就新建一个线程来处理这个任务！所以为了保证不出现<线程数达到了maximumPoolSize而不能新建线程>的错误，使用这个类型队列的时候，maximumPoolSize一般指定成Integer.MAX_VALUE，即无限大\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"LinkedBlockingQueue\")]),a._v(\"：这个队列接收到任务的时候，如果当前线程数小于核心线程数，则新建线程(核心线程)处理任务；如果当前线程数等于核心线程数，则进入队列等待。由于这个队列没有最大值限制，即所有超过核心线程数的任务都将被添加到队列中，这也就导致了maximumPoolSize的设定失效，因为总线程数永远不会超过corePoolSize\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"ArrayBlockingQueue\")]),a._v(\"：可以限定队列的长度，接收到任务的时候，如果没有达到corePoolSize的值，则新建线程(核心线程)执行任务，如果达到了，则入队等候，如果队列已满，则新建线程(非核心线程)执行任务，又如果总线程数到了maximumPoolSize，并且队列也满了，则发生错误\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"DelayQueue\")]),a._v(\"：队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口。这个队列接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"ThreadFactory threadFactory\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"创建线程的方式，这是一个接口，你new他的时候需要实现他的\"),t(\"code\",[a._v(\"Thread newThread(Runnable r)\")]),a._v(\"方法，一般用不上\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"RejectedExecutionHandler handler\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"抛出异常专用的，比如上面提到的两个错误发生了，就会由这个handler抛出异常，你不指定他也有个默认的\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"向threadpoolexecutor添加任务\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#向threadpoolexecutor添加任务\"}},[a._v(\"#\")]),a._v(\" 向ThreadPoolExecutor添加任务\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"通过ThreadPoolExecutor.execute(Runnable command)方法即可向线程池内添加一个任务\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"底层工作流程和拒绝策略\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#底层工作流程和拒绝策略\"}},[a._v(\"#\")]),a._v(\" 底层工作流程和拒绝策略\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[t(\"p\",[a._v(\"如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常RejectExecutionException\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"拒绝策略-核心-非核心-阻塞队列-都满了就会执行\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#拒绝策略-核心-非核心-阻塞队列-都满了就会执行\"}},[a._v(\"#\")]),a._v(\" 拒绝策略(核心 + 非核心 + 阻塞队列 都满了就会执行)\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"AbortPolicy(默认): 抛出异常 RejectedExecutionException\")]),a._v(\" \"),t(\"li\",[a._v(\"CallerRunsPolicy: 回到调用者运行\")]),a._v(\" \"),t(\"li\",[a._v(\"DiscardOldestPolicy: 抛弃等待最久的任务\")]),a._v(\" \"),t(\"li\",[a._v(\"DiscardPolicy: 不作任何处理\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"自定义线程池\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自定义线程池\"}},[a._v(\"#\")]),a._v(\" 自定义线程池\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"src/main/java/com/cyq/blog/pool/ThreadPoolDemo2.java\")])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}