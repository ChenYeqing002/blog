{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{463:function(a,t,r){\"use strict\";r.r(t);var v=r(2),s=Object(v.a)({},(function(){var a=this,t=a._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"记录一下常见的面试题\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#记录一下常见的面试题\"}},[a._v(\"#\")]),a._v(\" 记录一下常见的面试题\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"java基础\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java基础\"}},[a._v(\"#\")]),a._v(\" Java基础\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"面向对象基础\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向对象基础\"}},[a._v(\"#\")]),a._v(\" 面向对象基础\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_1-1语法基础\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1语法基础\"}},[a._v(\"#\")]),a._v(\" 1.1语法基础\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"面向对象特性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向对象特性\"}},[a._v(\"#\")]),a._v(\" 面向对象特性？\")]),a._v(\" \"),t(\"p\",[a._v(\"三大面向特性：封装、继承、多态\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"封装\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"继承\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"继承实现了IS-A的关系，例如Cat和Animal就是一种IS-A的关系，因此Cat可以继承自Animal，从而获得Animal非private的属性和方法。\")])])])]),a._v(\" \"),t(\"p\",[a._v(\"继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。\")]),a._v(\" \"),t(\"p\",[a._v(\"Cat对象可以当做Animal来使用，也就是说可以使用Animal引用Cat对象。父类引用指向子类对象称为\"),t(\"strong\",[a._v(\"向上转型\")]),a._v(\"。\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"多态\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"多态分为编译时多态和运行时多态：\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"编译时多态主要指方法的重载\")]),a._v(\" \"),t(\"li\",[a._v(\"运行时多态指程序中定义的对象引用指向的具体类型在运行期间才确定\")])])])])]),a._v(\" \"),t(\"p\",[a._v(\"运行时多态有三个条件：\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"继承\")]),a._v(\" \"),t(\"li\",[a._v(\"覆盖（重写）\")]),a._v(\" \"),t(\"li\",[a._v(\"向上转型\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"a-a-b-与-a-b-的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#a-a-b-与-a-b-的区别\"}},[a._v(\"#\")]),a._v(\" a=a+b 与 a+=b 的区别？\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"+=隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如byte、short或者int，首先会将他们提升到int类型，然后再执行加法操作。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_3-0-1-0-3-将会返回什么-true还是false\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-0-1-0-3-将会返回什么-true还是false\"}},[a._v(\"#\")]),a._v(\" 3*0.1 == 0.3 将会返回什么？true还是false？\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"false。因为有些浮点数不能完全精确地表示出来。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"能在-switch-中使用-string-吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#能在-switch-中使用-string-吗\"}},[a._v(\"#\")]),a._v(\" 能在 Switch 中使用 String 吗？\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"从 java 7 开始，可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"对-equale-和-hashcode-的理解\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对-equale-和-hashcode-的理解\"}},[a._v(\"#\")]),a._v(\" 对 equale() 和 hashCode() 的理解？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"为什么在重写 equals() 的时候需要重写 hashCode()？\\n\"),t(\"ul\",[t(\"li\",[a._v(\"因为有强制的规范指定需要同时重写 hashCode() 与 equals()，许多容器类，比如 HashMap、HashSet 都依赖于 hashCode 与 equals的规定。\")])])]),a._v(\" \"),t(\"li\",[a._v(\"有没有可能两个不相等的对象有相同的 hashCode？\\n\"),t(\"ul\",[t(\"li\",[a._v(\"有可能。两个不相等的对象可能会有相同的 hashCode 值，这就是为什么在 hashMap 中会有冲突。相等 hashCode 值得规定只是说两个对象相等，必须有相同的hashCode，但是没有关于不相等对象的任何规定。\")])])]),a._v(\" \"),t(\"li\",[a._v(\"两个相同的对象会有不同的 hashCode 吗？\\n\"),t(\"ul\",[t(\"li\",[a._v(\"不能。根据 hashCode 的规定，这是不可能的。\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"final、finalize和finally的不同之处\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#final、finalize和finally的不同之处\"}},[a._v(\"#\")]),a._v(\" final、finalize和finally的不同之处？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"final 是一个修饰符，可以修饰类、变量、方法。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。\")]),a._v(\" \"),t(\"li\",[a._v(\"Java 技术允许使用 finalize() 在垃圾收集器将对象从内存中清理出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象的调用，但是什么时候调用 finalize 没有保证。\")]),a._v(\" \"),t(\"li\",[a._v(\"finally 是一个关键字，与 try 和 catch 一起用于异常处理。finally 块一定会被执行，无论在 try 块中有没有异常发生。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"string、stringbuffer与stringbuilder的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string、stringbuffer与stringbuilder的区别\"}},[a._v(\"#\")]),a._v(\" String、StringBuffer与StringBuilder的区别？\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"可变和使用范围。String对象是不可变的，而StringBuffer和StringBuilder是可变字符序列。每次对 String 的操作相当于生成一个新的 String 对象，而对 StringBuffer 和 StringBuilder操作是对对象本身的操作，而不会生成新的对象。所以对于频繁改变内容的字符串避免使用 String，因为频繁的生成对象将会对系统性能产生影响。\")]),a._v(\" \"),t(\"li\",[a._v(\"线程安全。String由于有 final 修饰，是 immutable 的，安全性是简单而纯粹的。StringBuilder 和 StringBuffer 的区别在于 StringBuilder不保证同步，也就是说如果需要线程安全需要使用 StringBuffer，不需要同步的StringBuilder效率更高。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"java语言基础\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java语言基础\"}},[a._v(\"#\")]),a._v(\" Java语言基础\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"java-8特性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-8特性\"}},[a._v(\"#\")]),a._v(\" Java 8特性\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"java进阶\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java进阶\"}},[a._v(\"#\")]),a._v(\" Java进阶\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"集合框架\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集合框架\"}},[a._v(\"#\")]),a._v(\" 集合框架\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"并发框架\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发框架\"}},[a._v(\"#\")]),a._v(\" 并发框架\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_1-async-注解的相关问题\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-async-注解的相关问题\"}},[a._v(\"#\")]),a._v(\" 1. @Async 注解的相关问题\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"默认线程池的具体配置是什么?\\n\"),t(\"ul\",[t(\"li\",[a._v(\"org.springframework.boot.autoconfigure.task.TaskExecutionProperties\")]),a._v(\" \"),t(\"li\",[t(\"img\",{attrs:{src:\"img.png\",alt:\"img.png\"}})])])]),a._v(\" \"),t(\"li\",[a._v(\"源码是怎么做到只支持 void 和 Future 的?\\n\"),t(\"ul\",[t(\"li\",[t(\"img\",{attrs:{src:\"img_1.png\",alt:\"img_1.png\"}})])])]),a._v(\" \"),t(\"li\",[a._v(\"value属性是干什么用的?\\n\"),t(\"ul\",[t(\"li\",[a._v(\"存放线程池对象的 Bean Name\")])])]),a._v(\" \"),t(\"li\",[a._v(\"是不是项目里最好只定义一个线程池?\\n\"),t(\"ul\",[t(\"li\",[a._v(\"最好根据业务场景划分不同的线程池, 避免\"),t(\"code\",[a._v(\"支线任务\")]),a._v(\"阻塞,影响\"),t(\"code\",[a._v(\"主线任务\")]),a._v(\"(比如 发送短信出了问题,把线程池都占满了,此时主流程业务如果是用的同一个线程池,就会进入拒绝策略)\")])])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"io-nio框架\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#io-nio框架\"}},[a._v(\"#\")]),a._v(\" IO/NIO框架\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"jvm相关\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm相关\"}},[a._v(\"#\")]),a._v(\" JVM相关\")]),a._v(\" \"),t(\"h5\",{attrs:{id:\"jvm内存区域划分-每块在内存中都对应什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm内存区域划分-每块在内存中都对应什么\"}},[a._v(\"#\")]),a._v(\" JVM内存区域划分?每块在内存中都对应什么?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"堆\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"new出来的对象\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"栈\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"虚拟机栈\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"八大基本类型\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"指向对象的引用\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"实例方法\")])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"本地方法栈\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"存放由Native修饰的本地方法库调用的方法\")])])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"方法区\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"存放类的信息\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"常量池\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"方法信息\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"静态变量\")])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"程序计数器\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"每个线程私有的, 保存JVM的指令\")])])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"jmm模型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jmm模型\"}},[a._v(\"#\")]),a._v(\" JMM模型\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"类加载机制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载机制\"}},[a._v(\"#\")]),a._v(\" 类加载机制\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"垃圾回收\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#垃圾回收\"}},[a._v(\"#\")]),a._v(\" 垃圾回收\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"参数调优\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参数调优\"}},[a._v(\"#\")]),a._v(\" 参数调优\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"数据库\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库\"}},[a._v(\"#\")]),a._v(\" 数据库\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"transactional-rollbackfor-runtimeexception-class-norollbackfor-exception-class-出现-npe-会不会回滚\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#transactional-rollbackfor-runtimeexception-class-norollbackfor-exception-class-出现-npe-会不会回滚\"}},[a._v(\"#\")]),a._v(\" @Transactional(rollbackFor = RuntimeException.class, noRollbackFor = Exception.class) 出现 NPE 会不会回滚?\")]),a._v(\" \"),t(\"p\",[a._v(\"org.springframework.transaction.interceptor.RuleBasedTransactionAttribute.rollbackOn 中会进行 \"),t(\"code\",[a._v(\"抛出的异常\")]),a._v(\" 和 \"),t(\"code\",[a._v(\"回滚或不回滚异常\")]),a._v(\" 的距离比较, 看距离哪个更近(父类继承),取距离小的那个规则执行\")]),a._v(\" \"),t(\"p\",[a._v(\"JVM\")])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}