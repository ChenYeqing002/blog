{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{455:function(a,t,s){\"use strict\";s.r(t);var r=s(2),v=Object(r.a)({},(function(){var a=this,t=a._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"集合源码\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集合源码\"}},[a._v(\"#\")]),a._v(\" 集合源码\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"arraylist\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arraylist\"}},[a._v(\"#\")]),a._v(\" ArrayList\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"一、arraylist底层数据结构\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、arraylist底层数据结构\"}},[a._v(\"#\")]),a._v(\" 一、ArrayList底层数据结构\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_1、arraylist集合介绍\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、arraylist集合介绍\"}},[a._v(\"#\")]),a._v(\" 1、ArrayList集合介绍\")]),a._v(\" \"),t(\"p\",[a._v(\"ArrayList是一个List集合可变大小的数组的实现\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"_2、数组\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、数组\"}},[a._v(\"#\")]),a._v(\" 2、数组\")]),a._v(\" \"),t(\"p\",[a._v(\"数组大小一旦确定，就无法改变\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"增删慢：每次添加或删除元素，都需要更改数组长度、拷贝以及移动元素位置\")]),a._v(\" \"),t(\"li\",[a._v(\"查询快：由于数组在内存中是一块连续空间，因此可以根据地址+索引的方式快速获取对应位置上的元素\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"二、arraylist继承关系\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、arraylist继承关系\"}},[a._v(\"#\")]),a._v(\" 二、ArrayList继承关系\")]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200911202214.png\",alt:\"ArrayList继承图\"}})]),a._v(\" \"),t(\"h2\",{attrs:{id:\"hashmap\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hashmap\"}},[a._v(\"#\")]),a._v(\" HashMap\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"主要内容\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主要内容\"}},[a._v(\"#\")]),a._v(\" 主要内容\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"HashMap 与哈希表简介\")]),a._v(\" \"),t(\"li\",[a._v(\"Java 7中的 HashMap 源码解读(经典的哈希表实现)\")]),a._v(\" \"),t(\"li\",[a._v(\"Java 7的 HashMap 问题\\n\"),t(\"ul\",[t(\"li\",[a._v(\"非常容易碰到的死锁\")]),a._v(\" \"),t(\"li\",[a._v(\"潜在的安全隐患\\n\"),t(\"ul\",[t(\"li\",[a._v(\"CVE-2011-4858, Tomcat 邮件组的讨论\")])])])])]),a._v(\" \"),t(\"li\",[a._v(\"Java 8的 Hashmap 源码解读与改进\")]),a._v(\" \"),t(\"li\",[a._v(\"面试题分析\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"哈希表简介\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#哈希表简介\"}},[a._v(\"#\")]),a._v(\" 哈希表简介\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"电话本的例子\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-markdown extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-markdown\"}},[t(\"code\",[a._v(\"z -> 张三 15300000000\\nl -> 李四 15311111111\\nl -> 李六 15311111112\\n\")])])]),t(\"ul\",[t(\"li\",[a._v(\"核心是基于哈希值的桶和链表\")]),a._v(\" \"),t(\"li\",[a._v(\"O(1)的平均查找,插入,删除时间\")]),a._v(\" \"),t(\"li\",[a._v(\"致命缺陷是哈希值的碰撞(collision\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"java-7-hashmap\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-7-hashmap\"}},[a._v(\"#\")]),a._v(\" Java 7 HashMap\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"经典的哈希表实现:数组 + 链表\")]),a._v(\" \"),t(\"li\",[a._v(\"重要知识点\\n\"),t(\"ul\",[t(\"li\",[a._v(\"初始容量\")]),a._v(\" \"),t(\"li\",[a._v(\"负载因子\")])])])]),a._v(\" \"),t(\"p\",[a._v(\"把42亿个数[HashCode -2(31次方) ~ 2(31次方-1)]放到 16 个桶中\")]),a._v(\" \"),t(\"p\",[a._v(\"取模\\n缺点\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"负数求余是负数\")]),a._v(\" \"),t(\"li\",[a._v(\"较慢\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"为什么一定要是2的n次方\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么一定要是2的n次方\"}},[a._v(\"#\")]),a._v(\" 为什么一定要是2的n次方\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"只有长度是2的n次方时,进行减一操作才能获得全是1的二进制数,然后进行\"),t(\"code\",[a._v(\"按位与\")]),a._v(\"操作就能非常快速的获得数组的下标,并且分布还是均匀的\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"java-8-hashmap\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-8-hashmap\"}},[a._v(\"#\")]),a._v(\" Java 8 HashMap\")])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}